{"name": "test_018_02_sl_tc", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button id=\"react-burger-menu-btn\" style=\"position: absolute; left: 0px; top: 0px; z-index: 1; width: 100%; height: 100%; margin: 0px; padding: 0px; border: none; font-size: 0px; background: transparent; cursor: pointer;\">...</button> is not clickable at point (30, 30). Other element would receive the click: <div class=\"bm-menu\" style=\"height: 100%; box-sizing: border-box; overflow: auto;\">...</div>\n  (Session info: chrome=120.0.6099.71)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6498B4D02+56194]\n\t(No symbol) [0x00007FF6498204B2]\n\t(No symbol) [0x00007FF6496C76AA]\n\t(No symbol) [0x00007FF649718763]\n\t(No symbol) [0x00007FF64971675D]\n\t(No symbol) [0x00007FF649713F5C]\n\t(No symbol) [0x00007FF649712D15]\n\t(No symbol) [0x00007FF64970687F]\n\t(No symbol) [0x00007FF649735E7A]\n\t(No symbol) [0x00007FF649706226]\n\t(No symbol) [0x00007FF649736320]\n\t(No symbol) [0x00007FF649752786]\n\t(No symbol) [0x00007FF649735C23]\n\t(No symbol) [0x00007FF649704A45]\n\t(No symbol) [0x00007FF649705AD4]\n\tGetHandleVerifier [0x00007FF649C2D5BB+3695675]\n\tGetHandleVerifier [0x00007FF649C86197+4059159]\n\tGetHandleVerifier [0x00007FF649C7DF63+4025827]\n\tGetHandleVerifier [0x00007FF64994F029+687785]\n\t(No symbol) [0x00007FF64982B508]\n\t(No symbol) [0x00007FF649827564]\n\t(No symbol) [0x00007FF6498276E9]\n\t(No symbol) [0x00007FF649818094]\n\tBaseThreadInitThunk [0x00007FFEF36C7344+20]\n\tRtlUserThreadStart [0x00007FFEF38026B1+33]", "trace": "self = <testcases.test_018_02_swag_labs_testcase.Test_swaglab_case object at 0x0000023261A9C650>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"768f51f44ae2018f025f11167f4bf0b8\")>\n\n    def test_018_02_sl_tc(self,setup):\n    \n        self.driver=setup ;\n    \n        self.obj=Test_swaglabspages(self.driver) ;\n    \n        self.obj.test_get_url(\"https://www.saucedemo.com/\") ;\n    \n        self.obj.test_enter_username('standard_user') ;\n    \n        self.obj.test_enter_pasword('secret_sauce') ;\n    \n        self.obj.test_click_login() ;\n    \n        self.obj.test_status() ;\n    \n        self.obj.test_ham_bur_icon_click() ;\n    \n>       self.obj.test_logout_click() ;\n\ntestcases\\test_018_02_swag_labs_testcase.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npageobjects\\test_018_02_swaglabs_pages.py:52: in test_logout_click\n    self.driver.find_element(*Test_swaglabspages.hamburger_icon).click();\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000023262849ED0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF649818094]\\\\n\\\\tBaseThreadInitThunk [0x00007FFEF36C7344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFEF38026B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button id=\"react-burger-menu-btn\" style=\"position: absolute; left: 0px; top: 0px; z-index: 1; width: 100%; height: 100%; margin: 0px; padding: 0px; border: none; font-size: 0px; background: transparent; cursor: pointer;\">...</button> is not clickable at point (30, 30). Other element would receive the click: <div class=\"bm-menu\" style=\"height: 100%; box-sizing: border-box; overflow: auto;\">...</div>\nE         (Session info: chrome=120.0.6099.71)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6498B4D02+56194]\nE       \t(No symbol) [0x00007FF6498204B2]\nE       \t(No symbol) [0x00007FF6496C76AA]\nE       \t(No symbol) [0x00007FF649718763]\nE       \t(No symbol) [0x00007FF64971675D]\nE       \t(No symbol) [0x00007FF649713F5C]\nE       \t(No symbol) [0x00007FF649712D15]\nE       \t(No symbol) [0x00007FF64970687F]\nE       \t(No symbol) [0x00007FF649735E7A]\nE       \t(No symbol) [0x00007FF649706226]\nE       \t(No symbol) [0x00007FF649736320]\nE       \t(No symbol) [0x00007FF649752786]\nE       \t(No symbol) [0x00007FF649735C23]\nE       \t(No symbol) [0x00007FF649704A45]\nE       \t(No symbol) [0x00007FF649705AD4]\nE       \tGetHandleVerifier [0x00007FF649C2D5BB+3695675]\nE       \tGetHandleVerifier [0x00007FF649C86197+4059159]\nE       \tGetHandleVerifier [0x00007FF649C7DF63+4025827]\nE       \tGetHandleVerifier [0x00007FF64994F029+687785]\nE       \t(No symbol) [0x00007FF64982B508]\nE       \t(No symbol) [0x00007FF649827564]\nE       \t(No symbol) [0x00007FF6498276E9]\nE       \t(No symbol) [0x00007FF649818094]\nE       \tBaseThreadInitThunk [0x00007FFEF36C7344+20]\nE       \tRtlUserThreadStart [0x00007FFEF38026B1+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "start": 1709217298838, "stop": 1709217305594, "uuid": "f3485786-cfd4-4f7c-a61a-1e15d8b1e20f", "historyId": "21034d16718a26773b0d7ec0c65053bd", "testCaseId": "21034d16718a26773b0d7ec0c65053bd", "fullName": "testcases.test_018_02_swag_labs_testcase.Test_swaglab_case#test_018_02_sl_tc", "labels": [{"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_018_02_swag_labs_testcase"}, {"name": "subSuite", "value": "Test_swaglab_case"}, {"name": "host", "value": "DESKTOP-U7OANNR"}, {"name": "thread", "value": "5764-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_018_02_swag_labs_testcase"}]}