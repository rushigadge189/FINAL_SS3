{"name": "test_019_04_heroku_ddt", "status": "broken", "statusDetails": {"message": "PermissionError: [Errno 13] Permission denied: 'D:\\\\PYTHON CT15\\\\FINAL_REVISION\\\\testdata\\\\HEROKU_LOGIN.xlsx'", "trace": "self = <testcases.test_019_04_heroku_login_ddt.Test_019_04_heroku object at 0x000001F3BEE250D0>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"045382fa52b139d01a34dd85959ece58\")>\n\n    def test_019_04_heroku_ddt(self, setup):\n    \n        self.driver=setup ;\n    \n        path=\"D:\\\\PYTHON CT15\\\\FINAL_REVISION\\\\testdata\\\\HEROKU_LOGIN.xlsx\" ;\n    \n        rows=XUTils.rowCount(path, 'Sheet1') ;\n    \n        for r in range (2, rows+1) :\n    \n            self.driver.get('https://the-internet.herokuapp.com/login') ;\n    \n            username=XUTils.readData(path, 'Sheet1', r, 1) ;\n            password=XUTils.readData(path, 'Sheet1', r, 2) ;\n    \n            self.driver.find_element(By.XPATH, '//input[@id=\"username\"]').send_keys(username) ;\n    \n            self.driver.find_element(By.XPATH, '//input[@id=\"password\"]').send_keys(password) ;\n    \n            self.driver.find_element(By.XPATH, '//i[contains(text(), \" Login\")]').click() ;\n    \n            try:\n    \n                self.driver.find_element(By.XPATH, '//i[@class=\"icon-2x icon-signout\"]') ;\n    \n                print(\"\\n*************TEST IS PASSED**************\") ;\n    \n                self.driver.save_screenshot('D:\\\\PYTHON CT15\\\\FINAL_REVISION\\\\screenshots\\\\test_019_04_heroku_pass.png') ;\n    \n>               XUTils.writeData(path, 'Sheet1', r, 3, \"PASSED\") ;\n\ntestcases\\test_019_04_heroku_login_ddt.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutilities\\XUTils.py:18: in writeData\n    workbook.save(file) ;\nvenv\\Lib\\site-packages\\openpyxl\\workbook\\workbook.py:386: in save\n    save_workbook(self, filename)\nvenv\\Lib\\site-packages\\openpyxl\\writer\\excel.py:291: in save_workbook\n    archive = ZipFile(filename, 'w', ZIP_DEFLATED, allowZip64=True)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <zipfile.ZipFile [closed]>, file = 'D:\\\\PYTHON CT15\\\\FINAL_REVISION\\\\testdata\\\\HEROKU_LOGIN.xlsx', mode = 'w'\ncompression = 8, allowZip64 = True, compresslevel = None\n\n    def __init__(self, file, mode=\"r\", compression=ZIP_STORED, allowZip64=True,\n                 compresslevel=None, *, strict_timestamps=True, metadata_encoding=None):\n        \"\"\"Open the ZIP file with mode read 'r', write 'w', exclusive create 'x',\n        or append 'a'.\"\"\"\n        if mode not in ('r', 'w', 'x', 'a'):\n            raise ValueError(\"ZipFile requires mode 'r', 'w', 'x', or 'a'\")\n    \n        _check_compression(compression)\n    \n        self._allowZip64 = allowZip64\n        self._didModify = False\n        self.debug = 0  # Level of printing: 0 through 3\n        self.NameToInfo = {}    # Find file info given name\n        self.filelist = []      # List of ZipInfo instances for archive\n        self.compression = compression  # Method of compression\n        self.compresslevel = compresslevel\n        self.mode = mode\n        self.pwd = None\n        self._comment = b''\n        self._strict_timestamps = strict_timestamps\n        self.metadata_encoding = metadata_encoding\n    \n        # Check that we don't try to write with nonconforming codecs\n        if self.metadata_encoding and mode != 'r':\n            raise ValueError(\n                \"metadata_encoding is only supported for reading files\")\n    \n        # Check if we were passed a file-like object\n        if isinstance(file, os.PathLike):\n            file = os.fspath(file)\n        if isinstance(file, str):\n            # No, it's a filename\n            self._filePassed = 0\n            self.filename = file\n            modeDict = {'r' : 'rb', 'w': 'w+b', 'x': 'x+b', 'a' : 'r+b',\n                        'r+b': 'w+b', 'w+b': 'wb', 'x+b': 'xb'}\n            filemode = modeDict[mode]\n            while True:\n                try:\n>                   self.fp = io.open(file, filemode)\nE                   PermissionError: [Errno 13] Permission denied: 'D:\\\\PYTHON CT15\\\\FINAL_REVISION\\\\testdata\\\\HEROKU_LOGIN.xlsx'\n\nC:\\Users\\RUSHIKESH\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\zipfile.py:1284: PermissionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcases.test_019_04_heroku_login_ddt.Test_019_04_heroku object at 0x000001F3BEE250D0>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"045382fa52b139d01a34dd85959ece58\")>\n\n    def test_019_04_heroku_ddt(self, setup):\n    \n        self.driver=setup ;\n    \n        path=\"D:\\\\PYTHON CT15\\\\FINAL_REVISION\\\\testdata\\\\HEROKU_LOGIN.xlsx\" ;\n    \n        rows=XUTils.rowCount(path, 'Sheet1') ;\n    \n        for r in range (2, rows+1) :\n    \n            self.driver.get('https://the-internet.herokuapp.com/login') ;\n    \n            username=XUTils.readData(path, 'Sheet1', r, 1) ;\n            password=XUTils.readData(path, 'Sheet1', r, 2) ;\n    \n            self.driver.find_element(By.XPATH, '//input[@id=\"username\"]').send_keys(username) ;\n    \n            self.driver.find_element(By.XPATH, '//input[@id=\"password\"]').send_keys(password) ;\n    \n            self.driver.find_element(By.XPATH, '//i[contains(text(), \" Login\")]').click() ;\n    \n            try:\n    \n                self.driver.find_element(By.XPATH, '//i[@class=\"icon-2x icon-signout\"]') ;\n    \n                print(\"\\n*************TEST IS PASSED**************\") ;\n    \n                self.driver.save_screenshot('D:\\\\PYTHON CT15\\\\FINAL_REVISION\\\\screenshots\\\\test_019_04_heroku_pass.png') ;\n    \n                XUTils.writeData(path, 'Sheet1', r, 3, \"PASSED\") ;\n    \n                print1=self.driver.find_element(By.XPATH, '//h4[@class=\"subheader\"]').text ;\n                print(\"\\n***************TEXT AFTER LOGIN*************\") ;\n                print(\"\\n\",print1) ;\n    \n                self.driver.find_element(By.XPATH, '//i[@class=\"icon-2x icon-signout\"]').click() ;\n    \n            except:\n                self.driver.save_screenshot('D:\\\\PYTHON CT15\\\\FINAL_REVISION\\\\screenshots\\\\test_019_04_heroku_fail.png') ;\n    \n                print(\"\\n**************TEST IS FAILED*************\") ;\n    \n>               XUTils.writeData(path, 'Sheet1', r, 3, 'FAILED') ;\n\ntestcases\\test_019_04_heroku_login_ddt.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutilities\\XUTils.py:18: in writeData\n    workbook.save(file) ;\nvenv\\Lib\\site-packages\\openpyxl\\workbook\\workbook.py:386: in save\n    save_workbook(self, filename)\nvenv\\Lib\\site-packages\\openpyxl\\writer\\excel.py:291: in save_workbook\n    archive = ZipFile(filename, 'w', ZIP_DEFLATED, allowZip64=True)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <zipfile.ZipFile [closed]>, file = 'D:\\\\PYTHON CT15\\\\FINAL_REVISION\\\\testdata\\\\HEROKU_LOGIN.xlsx', mode = 'w'\ncompression = 8, allowZip64 = True, compresslevel = None\n\n    def __init__(self, file, mode=\"r\", compression=ZIP_STORED, allowZip64=True,\n                 compresslevel=None, *, strict_timestamps=True, metadata_encoding=None):\n        \"\"\"Open the ZIP file with mode read 'r', write 'w', exclusive create 'x',\n        or append 'a'.\"\"\"\n        if mode not in ('r', 'w', 'x', 'a'):\n            raise ValueError(\"ZipFile requires mode 'r', 'w', 'x', or 'a'\")\n    \n        _check_compression(compression)\n    \n        self._allowZip64 = allowZip64\n        self._didModify = False\n        self.debug = 0  # Level of printing: 0 through 3\n        self.NameToInfo = {}    # Find file info given name\n        self.filelist = []      # List of ZipInfo instances for archive\n        self.compression = compression  # Method of compression\n        self.compresslevel = compresslevel\n        self.mode = mode\n        self.pwd = None\n        self._comment = b''\n        self._strict_timestamps = strict_timestamps\n        self.metadata_encoding = metadata_encoding\n    \n        # Check that we don't try to write with nonconforming codecs\n        if self.metadata_encoding and mode != 'r':\n            raise ValueError(\n                \"metadata_encoding is only supported for reading files\")\n    \n        # Check if we were passed a file-like object\n        if isinstance(file, os.PathLike):\n            file = os.fspath(file)\n        if isinstance(file, str):\n            # No, it's a filename\n            self._filePassed = 0\n            self.filename = file\n            modeDict = {'r' : 'rb', 'w': 'w+b', 'x': 'x+b', 'a' : 'r+b',\n                        'r+b': 'w+b', 'w+b': 'wb', 'x+b': 'xb'}\n            filemode = modeDict[mode]\n            while True:\n                try:\n>                   self.fp = io.open(file, filemode)\nE                   PermissionError: [Errno 13] Permission denied: 'D:\\\\PYTHON CT15\\\\FINAL_REVISION\\\\testdata\\\\HEROKU_LOGIN.xlsx'\n\nC:\\Users\\RUSHIKESH\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\zipfile.py:1284: PermissionError"}, "start": 1709828689218, "stop": 1709828693619, "uuid": "ce5f82d2-7eac-4ccf-9221-1a99047a3e0d", "historyId": "4a408c807147e3c92861615e7bb980c1", "testCaseId": "4a408c807147e3c92861615e7bb980c1", "fullName": "testcases.test_019_04_heroku_login_ddt.Test_019_04_heroku#test_019_04_heroku_ddt", "labels": [{"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_019_04_heroku_login_ddt"}, {"name": "subSuite", "value": "Test_019_04_heroku"}, {"name": "host", "value": "DESKTOP-U7OANNR"}, {"name": "thread", "value": "6644-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_019_04_heroku_login_ddt"}]}